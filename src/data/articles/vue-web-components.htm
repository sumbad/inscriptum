<article id="article" class="entry">

  <header class="entry-header">
    <h1 class="entry-title">
      Использование Vue.js для создания пользовательских Web компонентов
    </h1>
    <div class="entry-meta">
      <ul>
        <li>15 апреля 2017</li>
        <span class="meta-sep">&bull;</span>
        <li>
          Перевод статьи Simon Tarchichi,
          <a href="http://vuetips.com/vue-web-components">Use Vue.js to create custom web components</a>
        </li>
      </ul>
    </div>
  </header>

  <div class="entry-content">

    <p class="lead">
      <strong>Web компоненты позволяют определять новые HTML теги,</strong> которые принято называть
      пользовательскими элементами (custom elements). Эти теги могут быть в дальнейшем использованы непосредственно
      в HTML коде вашего приложения:
    </p>
    <!--<div v-html="'<iframe src='gists/84cb537ad664af6a299329c9c97960c3.html'></iframe>'"></div>        -->
    <!--<iframe id="iframe" scrolling="no" style="width:100%" ref="iframe"></iframe>-->
    <Gist iframeid="84cb537ad664af6a299329c9c97960c3" />

    <p class="lead">В этом примере, <span v-text="'<share-buttons/>'"></span> будет интерпретирован браузером и "заменен"
      HTML разметкой, которую вы для него определили. В результате получим:</p>
    <Gist iframeid="e9ea19cb422c98942137e9e3db39c426" />
    <!--<iframe id="iframe" scrolling="no" style="width:100%" ref="iframe"></iframe>-->

    <p class="lead">Так же здесь можно было бы использовать JS логику, чтобы при событии click делиться страницей через
      Facebook или Twitter.
    </p>

    <p class="lead">
      <strong>Web компоненты подобны Vue.js компонентам.</strong> Они имеют жизненный цикл (lifecycle),
      свойства и могут быть вложенными. Их API менее мощный, но зато следует стандарту, определенному
      в
      <a href="https://www.w3.org/standards/techs/components#w3c_all">W3C спецификации</a>.
    </p>

    <p class="lead">
      <strong>Проблема в том, что Web компоненты не имеют полной поддержки в браузерах до настоящего момента.</strong>      Посмотреть поддержку Web компонентов браузерами можно на сайте
      <a href="http://jonrimmer.github.io/are-we-componentized-yet/">are-we-componentized-yet</a> или
      <a href="http://caniuse.com/#search=web%20components">caniuse.com</a>.
    </p>

    <p class="lead">
      Но, применив немного JS магии <strong>вы можете прямо сейчас перевести ваши Vue.js компоненты в Web компоненты, </strong>      что позволит использовать их в любых web приложениях, даже вместе с React, Angular или
      <span v-text="'<имя-вашего-любимого-framework>'" />.
    </p>


    <h2>Как получить из вашего Vue.js компонента универсальные Web компоненты</h2>

    <p class="lead">
      Понадобится <a href="https://karol-f.github.io/vue-custom-element">vue-custom-element</a> библиотека
      написанная
      <a href="https://github.com/karol-f">@karol-f</a>. Она позволит вам
      <strong>использовать Vue.js компонент как пользовательский элемент </strong>.
    </p>

    <h3>HTML подход</h3>
    <p class="lead">
      Один раз зарегистрировав пользовательский компонент вы можете <strong>вставлять его тег</strong>      в обычный HTML, SPA, React, Angular или Vue.js проект.
    </p>
    <Gist iframeid="b8f682341afaf53cb30e08183f4480fa" />

    <p class="lead">
      <strong>Данный подход требует включения в вашу страницу ядра Vue.js и библиотеки vue-custom-element.</strong>
    </p>

    <p class="lead">
      Props будут <a href="https://karol-f.github.io/vue-custom-element/#/demos/basic">автоматически интерпретированы к их нативным типам</a>      (атрибут "false" интерпретируется как boolean значение false).
    </p>
    <p class="lead">
      API пользовательского элемента доступно так же как любого другого HTML элемента: document.getElementsByTagName('share-buttons').
    </p>

    <p class="lead">
      Пример выше использует HTML тег <span v-text="'<template>'"></span>, но вы можете поместить строку
      шаблона непосредственно в template свойство вашего компонента.
    </p>

    <h4>Плюсы и минусы</h4>
    <p class="lead">
      Из вышеописанного подхода следует что:
      <ul class="disc">
        <li>зависимый скрипт должен быть включен в итоговый HTML файл</li>
        <li>поведение компонента можно прочитать непосредственно из исходного кода страницы</li>
      </ul>
      Это может оказаться как плюсами, так и минусами в зависимости от ваших задач.
    </p>

    <p class="lead">
      Наиболее вероятный подход, который я могу представить - это распространение Vue.js компонентов в форме
      виджетов на множество вебсайтов. Итак, давайте соберем весь этот код в единый файл.
    </p>

    <h3>Сборка Vue.js компонентов в единый .js файл</h3>
    <p class="lead">
      Посмотрите на <a href="https://github.com/kartsims/vue-customelement-bundler">vue-customelement-bundler</a>      репозиторий, который содержит:
      <ul class="disc">
        <li>настройки Webpack</li>
        <li>код компонента (ES2015 во .vue файле)</li>
        <li>NPM зависимости, чтобы можно было собрать и запустить собственный экземпляр</li>
      </ul>
      <strong>Он позволяет взять код Vue.js компонента (в форме .vue файла) и на выходе получить единый .js файл</strong>      с вложенным кодом самого Vue, библиотеки vue-custom-element и вашего Vue.js компонента. Получившийся
      файл будет зарегистрирован, чтобы использоваться, как пользовательский элемент. Далее, можно использовать
      ваш компонент в любом HTML/JS приложении, подобно этому:
    </p>
    <Gist iframeid="30173875f0649fc253e15e210342bf7d" />

    <p class="lead">
      Замечание:
      <del>Итоговый файл весит 266kB.</del> Слишком большой размер файла. Мои навыки в работе с Webpack не
      позволили его уменьшить. Попытки ипользовать плагин UglifyJsPlugin привели к ошибке, которую не
      удалось устранить. Возможно, у вас получиться лучше, пожалуйста сообщите мне как можно оптимизировать
      мои настройки, уверен их можно улучшить.
    </p>

    <p class="lead">
      Изменение 5/4: Спасибо <a href="https://github.com/anthonygore">@anthonygore</a> и UglifyJS,
      <del>итоговый файл стал весить 113kB.</del>.
    </p>

    <p class="lead">
      Изменение 6/4: Энтони удалось уменьшить сборку еще на 22kB. <strong>Итоговый файл теперь весит 91kB (32kB в gzip)</strong>!
    </p>

    <p class="lead">
      Изменение 11/4: <a href="https://github.com/chimon2000">@chimon2000</a> предложено в качестве альтернативы
      для сборки
      <strong>использовать rollup.js, таким образом, вес файла стал 76kB (24kB в gzip)</strong>, спасибо
      Раян! Эта сборка находится в
      <a href="https://github.com/kartsims/vue-customelement-bundler/tree/rollup"><code class="highlighter-rouge">rollup</code> ветке</a>
      репозитория.
    </p>


    <h2>Немного об API Web компонентов (Web Components API)</h2>

    <p class="lead">
      <strong>Это часть статьи не обязательна</strong> для использования Vue.js компонентов, как Web
      компонентов, но часто бывает полезно знать как это работает, чтобы писать код лучше.
    </p>

    <p class="lead">
      Web компоненты включают следующие W3C спецификации:
      <ul class="disc">
        <li>Custom Element</li>
        <li>HTML Template</li>
        <li>HTML Import</li>
      </ul>
      Рассмотрим каждую из них подробнее.
    </p>

    <h3>Custom Element</h3>

    <p class="lead">
      Custom Element является основным API, доступным разработчикам для определения новых HTML тегов, которые
      могут быть интерпретированы браузером.
    </p>

    <p class="lead">
      <strong>
        Функции обратных вызовов жизненного цикла 
        (иначе говоря, <a href="https://www.w3.org/TR/custom-elements/#custom-element-reactions">реакции</a>):
      </strong>
      <ul class="disc">
        <li>constructor (элемент обновлен, имеется ввиду вставлен в DOM с помощью JS или изначально там находился)</li>
        <li>connectedCallback (вставка в DOM)</li>
        <li>disconnectedCallback (удаление из DOM)</li>
        <li>adoptedCallback (перемещение в новый документ)</li>
        <li>attributeChangedCallback</li>
      </ul>
      Звучит знакомо? Да, это выглядит как жизненный цикл компонентов Vue.js!
    </p>

    <p class="lead">
      Однако, написание пользовательских элементов намного более многословно. Одна из причин этого - вы не
      можете получить выгоду от магии реактивных свойств во Vue.js, или "сахара" в синтаксисе шаблонов
      типо v-if выражений.
    </p>

    <p class="lead">
      Регистрация пользовательских элементов выполняется используя window.customElements.define, как в примере
      ниже:
    </p>
    <Gist iframeid="e0c5e64d1185b04dcb12a79027ef80ec" />

    <p class="lead">
      Обратите внимание, что connectedCallback вызывается, когда элемент уже вставлен.
    </p>

    <p class="lead">
      Помимо этого, теги компонентов должны соответствовать нескольким требованиям:
      <ul class="disc">
        <li>содержать дефис</li>
        <li>не содержать заглавных символов</li>
        <li>не использовать одно из запрещенных имен (annotation-xml, color-profile и т.д.)</li>
      </ul>
      Подробнее в <a href="https://www.w3.org/TR/custom-elements/#valid-custom-element-name">W3C спецификации</a>.
    </p>


    <h3>HTML Template</h3>

    <p class="lead">
      Разметка пользовательского элемента может содержаться в теге <span v-text="'<template>'"></span>      внутри DOM.
    </p>
    <Gist iframeid="bf9f90fbaf3aa6fbeaf3121f0a591835" />

    <p class="lead">
      Эта разметка может быть импортирована и клонирована в пользовательский элемент по реакции на createdCallback.
    </p>


    <h3>HTML Import</h3>

    <p class="lead">
      Определяет разметку и JS логику в одном файле, который может быть импортирован в ваше приложение с помощью
      одного тега <span v-text="'<link>'"></span>.
    </p>
    <Gist iframeid="912cd8ed9e25833d0fd3e8b7c35830f4" />

    <p class="lead">
      Содержимое файла share-buttons.html:
    </p>
    <Gist iframeid="2e1c7d75f3554802bf60d12abf7790bc" />

    <p class="lead">
      Звучит все более и более знакомо, не так ли?
    </p>


    <h3>Взаимодействие компонентов</h3>

    <p class="lead">
      <strong>Взаимодействие компонента с его родителем происходит посредством событий</strong>, точно
      так же как во Vue.js. События запускаются используя dispatchEvent метод HTML элементов.
    </p>
    <Gist iframeid="bcb94cad7197d4ca6f98a404a0c682c5" />

    <p class="lead">
      Родительский компонент может взаимодействовать с дочерними двумя способами:
      <ul class="disc">
        <li>используя атрибуты</li>
        <li>используя методы компонента прототипа</li>
      </ul>
      Первый способ точно такой же как во Vue.js. Вы можете установить атрибуты, только они не будут реактивными,
      так что вам будет нужно использовать attributeChangedCallback если захотите запускать логику, когда
      заначение атрибутов меняется.
    </p>

    <p class="lead">
      Второй метод тоже работает во Vue.js, хотя там он и не рекомендуется.
    </p>

    <h3>Поддержка и полифиллы (polyfills)</h3>

    <p class="lead">
      Состоянии поддержки браузерами пользовательских компонентов можно узнать на <a href="http://caniuse.com/#search=web%20components">caniuse.com</a>      или <a href="http://jonrimmer.github.io/are-we-componentized-yet/">are-we-componentized-yet</a>.
    </p>

    <p class="lead">
      Библиотека полифиллов позволяет вам использовать эти API в браузерах, еще не имеющих их поддержки. Ниже
      ссылки на некоторые из них:
      <ul class="disc">
        <li><a href="https://github.com/webcomponents/custom-elements">Custom Elements polyfill</a> (от команды
          Polymer)</li>
        <li><a href="https://github.com/WebReflection/document-register-element">document-register-element</a>          (от Andrea Giammarchi)</li>
      </ul>
      Замечание: я не упоминал Shadow DOM в этой статье. Думаю это могло бы смутить разработчиков, которые
      фокусируются на переносе их Vue.js компонентов к пользовательским элементам. Посмотрите ссылки
      в конце, чтобы получить больше информации по данной теме.
    </p>


    <h2>Ссылки</h2>

    <ul class="disc">
      <li><a href="https://karol-f.github.io/vue-custom-element/">Vue Custom Element</a>: трансформация Vue.js
        компонентов в пользовательские элементы</li>
      <li><a href="https://github.com/kartsims/vue-customelement-bundler">Vue Custom Element Bundler</a>:
        сборка Vue.js компонентов в виде единого .js файла</li>
      <li><a href="https://www.webcomponents.org">WebComponents.org</a>: каталог и ресурсы по пользовательским
        элементам (Custom Elements)</li>
      <li>
        Статья "The case for Custom Elements" (<a href="https://medium.com/dev-channel/the-case-for-custom-elements-part-1-65d807b4b439#.lj3f8evee">часть 1</a>        и <a href="https://medium.com/dev-channel/the-case-for-custom-elements-part-2-2efe42ce9133#.x0xz0nwph">часть 2</a>)
        автор Rob Dodson
      </li>
      <li><a href="http://www.backalleycoder.com/2016/08/26/demythstifying-web-components/">Demythstifying Web Components</a>        автор Daniel Buchner</li>
    </ul>
  </div>

</article>