<article id="article"
         class="entry">

  <header class="entry-header">
    <h1 class="entry-title">
      Web Components. Принцип использования
    </h1>
    <div class="entry-meta">
      <ul>
        <li>3 августа 2017</li>
      </ul>
    </div>
  </header>

  <div class="entry-content">

    <h2>Обзор</h2>

    <p class="lead">
      По ходу статьи <strong>рассмотрим вопросы использования Web Components в приложении</strong>, какие
      существуют подходы, их плюсы и минусы. Увидим, как подключить компонент через HTML Imports и JavaScript.
    </p>


    <h2>Использование Web Components посредством спецификации HTML Imports</h2>

    <p class="lead">
      В предыдущей статье мы рассмотрели четыре спецификации Web Components, одна из них это HTML Imports.
      Напомню, что основное её назначение это механизм внедрения созданного компонента в приложение.
      Создадим компонент use.html следующим образом:
    </p>

    <Gist iframeid="c650ffbec7b73bc7c10bea2b527f555d" />

    <p class="lead">
      Используем компонент use-web-components в файле index.html:
    </p>

    <Gist iframeid="30b38ac1115b815fd33fdf873097b7f7" />

    <p class="lead">
      В примере выше весь код нашего компонента был сосредоточен в html файле. Далее, в соответствии с HTML
      Imports мы подключили компонент к основному приложению в index.html через строку
    </p>

    <p class="lead">
      <span v-text="`<link rel='import' href='use.html' id='use'/>`"></span>
    </p>

    <p class="lead">
      Подключение компонентов с помощью спецификации HTML Imports имеет ряд преимуществ:
      <ol class="disc">
        <li>Автоматически исключаются множественные импорты на уровне браузера.</li>
        <li>
          Написание разметки HTML, CSS стилей и JS кода в одном html файле поддерживается всеми редакторами и средами
          разработки, а также не противоречит принципам Web.
        </li>
      </ol>
    </p>

    <p class="lead">
      Но есть и весомые отрицательные стороны у данного подхода:
      <ol class="disc">
        <li>
          Спецификация HTML Imports не поддерживается во всех современных браузерах. Их производители до сих пор
          не пришли к общему мнению по данному вопросу.
        </li>
        <li>
          Данные подход затруднительно использовать с современными системами сборки, такими как Webpack.
        </li>
        <li>
          Если в приложении используется несколько компонентов, то все их придется подгружать через link с атрибутом
          rel="import" или хранить все компоненты в одном файле. И первое и второе нельзя назвать хорошим
          решением.
        </li>
        <li>
          HTML Imports появилась до динамических импортов ES2015. Теперь же гораздо предпочтительнее использовать
          JavaScript для загрузки дополнительной функциональности, что в некотором роде нивелирует преимущества
          HTML Imports.
        </li>
      </ol>
    </p>



    <h2>Использование Web Components посредством JavaScript</h2>


    <p class="lead">
      Чтобы понять механизм создания и подключения компонента на JavaScript, и сравнить его с предыдущим подходом,
      создадим аналогичный пример. Компонент use.js:
    </p>

    <Gist iframeid="3ef78a0e5cc1f09934eddf310b6f3cdb" />

    <p class="lead">
      Используем компонент use-web-components в файле index.html:
    </p>

    <Gist iframeid="a42b24ddfe4e8650d2745cc3b4fdf6be" />


    <p class="lead">
      При подключении компонентов с помощью JavaScript гораздо больше преимуществ и меньше недостатков. Из
      плюсов:
      <ol class="disc">
        <li>
          Близость современным JavaScript разработчикам. Этот подход не нужно разбирать и заново осмысливать, он
          близок всем, кто создавал компоненты на ReactJS или Angular.
        </li>
        <li>
          Подключение компонента подобно подключению любого другого js файла.
        </li>
        <li>
          Не требует дополнительных полифилов для работы.
        </li>
        <li>
          Просто использовать вместе с Webpack.
        </li>
      </ol>
    </p>


    <p class="lead">
      Но есть и весомые отрицательные стороны у данного подхода:
      <ol class="disc">
        <li>
          Писать HTML и CSS внутри JS кода может показаться не лучшей идеей.
        </li>
        <li>
          Писать разметку в виде шаблонных строк неудобно, тем более, что в этом случае почти все среды разработки
          будут воспринимать её как обычную строку.
        </li>
      </ol>
    </p>


    <p class="lead">
      Хоть данный подход и не лишен своих минусов, использовать его гораздо удобнее.
    </p>




    <h2>Итог</h2>

    <p class="lead">
      При создании компонента необходимо заранее определить способ его дальнейшего использования. Существует
      два подхода:
      <ul class="disc">
        <li>
          подключать компоненты с помощью HTML Imports;
        </li>
        <li>
          загружать компоненты как обычные JavaScript файлы.
        </li>
      </ul>
      Оба подхода имеют плюсы и минусы, но, пожалуй, решающим является современная экосистема JavaScript, которая
      делает второй фаворитом. Помимо возможности использовать сборки и лучшие практики компоновки приложений,
      он позволяет подключать компоненты в современных браузерах без загрузки дополнительных зависимостей
      в виде полифилов.
    </p>


    <h2>Ссылки</h2>

    <ul class="disc">
      <li><a href="https://github.com/webcomponents/webcomponentsjs">webcomponentsjs</a> и
        <a href="https://www.webcomponents.org/polyfills">polyfills</a> - полифиллы и как их использовать
        (для работы еще нереализованных спецификаций в браузерах).
      </li>
      <li><a href="https://www.html5rocks.com/en/tutorials/webcomponents/imports/">HTML Imports</a>.</li>
    </ul>
  </div>

</article>