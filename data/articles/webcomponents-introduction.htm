<article id="article" class="entry">

  <header class="entry-header">
    <h1 class="entry-title">
      Web Components. Введение
    </h1>
    <div class="entry-meta">
      <ul>
        <li>18 июня 2017</li>
      </ul>
    </div>
  </header>

  <div class="entry-content">


    <h2>Пролог</h2>

    <p class="lead">
      Данная серия статей под одноименным заголовком будет посвящена технологии Web Components.
      Основным объектом рассмотрения являются именно
      <strong>нативные возможности Web Components</strong> без участия сторонних
      фреймворков, таких как Polymer, X-Tag или SlateJS.
    </p>

    <h4>Плюсы и минусы</h4>
    <p class="lead">
      Три основных вопроса, на которые вы найдете ответы:
      <ul class="disc">
        <li>Чем являются Web Components и почему они отличаются от современных web-фреймворков
          и библиотек?</li>
        <li>Каким образом происходит создание Web Components?</li>
        <li>Как можно использовать Web Components уже сегодня?</li>
      </ul>
    </p>


    <h2>Причины появления Web Components</h2>

    <p class="lead">Идея Web Components родилась в попытках решения ряда проблем, с которыми сталкиваются
      web-разработчики чуть ли не с зарождения веба:
      <ol>
        <li>Изоляция стилей отдельных элементов на странице.</li>
        <li>Переиспользование ранее созданных элементов.</li>
        <li>Масштабируемость без ущерба понятности.</li>
      </ol>
    </p>

    <p class="lead">
      Преодолевались эти и другие проблемы front-end через использование различных инструментов.
      Подход Java -> JavaScript (к примеру,
      <a href="https://ru.wikipedia.org/wiki/Google_Web_Toolkit">GWT</a>) или {что-то
      более удобное} -> JavaScript позволил использовать популярные языки для написания
      целых web-порталов без необходимости знаний в самом JavaScript. Библиотеки,
      вроде jQuery дали возможность абстрагироваться от реализации отдельных элементов.
      Из последних, современные JavaScript фреймворки, такие как React, Angular,
      Vue.js способные не просто решить все вышеописанные проблемы, но и охватить
      вопросы роутинга, безопасности и взаимодействия с сервером в прозрачной манере.
    </p>

    <p class="lead">
      Каждый из этих подходов решает важные задачи, не зря все они в большей или меньшей
      степени используются во фронтенде уже не первый год. Но тем не менее три вышеописанных
      проблемы так и остались с нами. Почему же? Дело в том, что в попытках упростить
      и упорядочить одно, инструменты невольно усложняют и запутывают другое. Современные
      JavaScript фреймворки решают все три проблемы с лихвой и даже больше, но возможно
      в этом и проблема - они привносят свою сложность, которая сильно превышает
      сложность решаемой задачи.
    </p>

    <p class="lead">
      <strong>Итак, Web Components это четыре спецификации, которые позволяют создавать 
        изолированные элементы с возможностью прозрачного переиспользования и расширения, 
        основываясь на других таких же элементах.</strong>
    </p>

    <p class="lead">
      Сила Web Components именно в стандарте. А значит, ответственность консорциума и сообщества.
    </p>


    <p class="lead">
      В результате следования этим стандартам появляется возможность создания и расширения
      элементов подобных button или input в HTML. Такой элемент будет являться компонентом,
      его можно использовать точно так же, как и уже существующие в браузерах. При
      этом отсутствие дополнительной инфраструктуры в виде библиотек или фреймворков
      уменьшает кодовую базу и положительно влияет на производительность. Немаловажно
      значение общего подхода в построении компонентов на основе спецификации. Это
      позволяет расширять существующие элементы и компоненты без существенного их
      усложнения.
    </p>

    <p class="lead">
      В завершении вводной части скажу о двух важных особенностях. Во-первых Web Components
      имеют важное преимущество - они могут стать мостом между разными фреймворками
      и подходами во front-end, так как их удобно использовать и внутри проектов с
      React, и с Angular и даже рядом с “вечными плагинами” jQuery. Во-вторых, и
      это отнюдь не плюс Web Components - они поддерживаются не во всех современных
      браузерах, придется приложить усилия используя их прямо сегодня, но это все
      же возможно. Тем не менее, Web Components - это завтра front-end и похоже,
      что в этом уже никто не сомневается.
    </p>

  </div>

</article>