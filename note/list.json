[
  {
    "id": "c699f12f-0f2e-4022-9434-e1d2df560a41",
    "name": "Organizacziya-dostupa-k-REST-API-na-osnove-Modeli-kontrolya-dostupa",
    "preview": {
      "image": "https://res.cloudinary.com/inscriptum/image/upload/v1643849721/blob_h7l1sn.png",
      "title": "Организация доступа к REST API на основе Модели контроля доступа ",
      "description": "Разграничение доступа к Node.js web-приложению согласно прав пользователей с использованием библиотеки Casbin"
    },
    "draft_id": "f21edb2a-fafc-4033-80be-f34050018886",
    "static_link": "note/Organizacziya-dostupa-k-REST-API-na-osnove-Modeli-kontrolya-dostupa",
    "updated_at": null,
    "created_at": "2022-02-03T01:10:22.209+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": "Denis Sumbaev",
      "email": "denis.sumbaev@gmail.com"
    }
  },
  {
    "id": "e5c2c440-529a-4570-9620-c8d51c904db3",
    "name": "Stencil--kompilyator-Web-Components-i-PWA",
    "preview": {
      "image": null,
      "title": "Stencil: компилятор Web Components и PWA",
      "description": "Кратко об опыте использования Stencil, который позиционируется, как современное развитие UI фреймворков нацеленных на создание визуальных компонентов."
    },
    "draft_id": "f7d154e8-eddc-4225-a827-8e18e7512c39",
    "static_link": "note/Stencil--kompilyator-Web-Components-i-PWA",
    "updated_at": "2019-12-02T19:39:21+00:00",
    "created_at": "2019-11-05T14:14:14+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "1d41de8e-9378-40e5-ac98-293ef81518e1",
    "name": "Bazovy-j-JavaScript",
    "preview": {
      "image": null,
      "title": "Базовый JavaScript",
      "description": "Приведение типов."
    },
    "draft_id": "32f1a05e-320d-481d-9b94-7bc701e665a1",
    "static_link": "note/Bazovy-j-JavaScript",
    "updated_at": "2019-09-26T13:09:06+00:00",
    "created_at": "2019-09-26T13:09:06+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "93dcda1c-0387-4602-b874-7d59a75a043b",
    "name": "Web-Components--Princzip-ispol-zovaniya",
    "preview": {
      "image": "",
      "title": "Web Components. Принцип использования",
      "description": "Рассмотрение вопросов использования Web Components в приложении, какие существуют подходы, их плюсы и минусы. Способы подключения компонентов через HTML Imports и JavaScript."
    },
    "draft_id": "47835add-a028-4048-ba8e-8cf41b587555",
    "static_link": "note/Web-Components--Princzip-ispol-zovaniya",
    "updated_at": "2022-01-01T14:35:06.335+00:00",
    "created_at": "2019-09-26T12:43:16+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "7cba79c0-1e16-46a4-acfb-7b38a0c62363",
    "name": "Web-Components--Osnovy-",
    "preview": {
      "image": "https://inscriptum.js.org/data/articles/webcomponents-base/images/recipe.jpg",
      "title": "Web Components. Основы",
      "description": "Базовые вещи касательно Web Components. Способы создания элементов веб-страницы на основе Web Components. Четыре спецификации Web Components. Фундаментальные аспекты компонентов."
    },
    "draft_id": "eae5facd-55b2-4ed1-a3f7-8a19ade6d4b3",
    "static_link": "note/Web-Components--Osnovy-",
    "updated_at": "2019-09-26T11:19:34+00:00",
    "created_at": "2019-09-26T11:19:34+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "f7ae56b4-fe5b-46db-b4f2-bb8ee9f6e2a4",
    "name": "Web-Components--Vvedenie",
    "preview": {
      "image": null,
      "title": "Web Components. Введение",
      "description": "Данная серия статей под одноименным заголовком будет посвящена технологии Web Components. Основным объектом рассмотрения являются именно нативные возможности Web Components без участия сторонних фреймворков, таких как Polymer, X-Tag или SlateJS."
    },
    "draft_id": "fd78595f-3a88-4402-b0d9-76b0f63f8836",
    "static_link": "note/Web-Components--Vvedenie",
    "updated_at": "2019-09-25T19:20:32+00:00",
    "created_at": "2019-09-11T08:34:53+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "ca21c809-fff4-4a25-832c-a719731b0c52",
    "name": "Ispol-zovanie-Vue-js-dlya-sozdaniya-pol-zovatel-skix-Web-komponentov",
    "preview": {
      "image": null,
      "title": "Использование Vue.js для создания пользовательских Web компонентов",
      "description": "Перевод статьи Simon Tarchichi \"Use Vue.js to create custom web components\". Автор делает краткий обзор Web components и показывает как их можно создавать с помощью Vue.js."
    },
    "draft_id": "d0723055-c413-4736-8543-7ee324ca85c8",
    "static_link": "note/Ispol-zovanie-Vue-js-dlya-sozdaniya-pol-zovatel-skix-Web-komponentov",
    "updated_at": "2019-09-17T09:38:34+00:00",
    "created_at": "2019-09-03T20:52:26+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  },
  {
    "id": "ef45f77e-f973-47a5-ba41-a12450ccec3d",
    "name": "Obzor-stat-i--He-who-thinks-change-detection-is-depth-first-and-he-who-thinks-it-s-breadth-first-are-both-usually-right-",
    "preview": {
      "image": "https://res.cloudinary.com/inscriptum/image/upload/v1567478643/blob_c6wjjv.png",
      "title": "Обзор статьи \"He who thinks change detection is depth-first and he who thinks it’s breadth-first are both usually right\"",
      "description": "Max NgWizard K рассматривает чем же в сущности является механизм change detection (обнаружения изменений) в Angular - depth first (в глубину) или breadth first (в ширину). depth first - это когда проверяются дочерние компоненты по отношению к текущему, breadth first - проверяются соседние к текущему компоненту.\nПервое, что делает автор, это помещает механизм логирования в метод ngDoCheck. В результате оказывается, что проверка начинается алгоритмом breadth first, но затем останавливается на одной из ветвей дочерних компонентов и продолжается в виде алгоритма depth first. Этот факт вносит смуту и Max NgWizard K переносит логирование к методу, который вызывается в момент, когда механизм change detection оценивает выражения в шаблоне.\nВ результате получается правильный depth-first алгоритм. Чтобы пояснить итоги двух проведенных экспериментов автор напоминает ключевые операции в механизме change detection Angular:\nобновление свойств дочерних компонентов;"
    },
    "draft_id": "4e133edb-dc81-4a67-9fc4-649885313ca4",
    "static_link": "note/Obzor-stat-i--He-who-thinks-change-detection-is-depth-first-and-he-who-thinks-it-s-breadth-first-are-both-usually-right-",
    "updated_at": "2019-09-03T10:46:17+00:00",
    "created_at": "2019-09-03T10:46:17+00:00",
    "author": {
      "id": "83f51013-2a43-4916-89da-6027f91f1190",
      "name": null,
      "email": "test@test.test"
    }
  }
]